-module(wrked_cache).

-behaviour(gen_server).

%% API
-export([child_spec/0, start_link/0]).

%% API
-export([fetch/1, store/2]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-define(TTL, 24 * 60 * 60 * 1000).

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% @end
%%--------------------------------------------------------------------
-spec child_spec() -> supervisor:child_spec().

child_spec() ->
    #{id => ?MODULE, start => {?MODULE, start_link, []}}.

%%--------------------------------------------------------------------
%% @doc
%% @end
%%--------------------------------------------------------------------
-spec start_link() -> {ok, pid()} | ignore | {error, term()}.

start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% @end
%%--------------------------------------------------------------------
-spec fetch(iodata()) -> {ok, iodata()} | error.

fetch(Wrk) ->
    gen_server:call(?MODULE, {fetch, Wrk}).

%%--------------------------------------------------------------------
%% @doc
%% @end
%%--------------------------------------------------------------------
-spec store(iodata(), iodata()) -> ok.

store(Wrk, Fit) ->
    gen_server:cast(?MODULE, {store, Wrk, Fit}).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
init(_Opts) ->
    %% TODO: disk table?
    Table = ets:new(?MODULE, [private]),
    {ok, _State = Table}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
handle_call({fetch, Wrk}, _From, State = Table) ->
    Reply = case ets:lookup(Table, Wrk) of
                [{_Wrk, Fit}] -> {ok, Fit};
                []            -> error
            end,
    {reply, Reply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
handle_cast({store, Wrk, Fit}, State = Table) ->
    ets:insert(Table, {Wrk, Fit}),
    erlang:send_after(?TTL, self(), {delete, Wrk}),
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
handle_info({delete, Wrk}, State = Table) ->
    ets:delete(Table, Wrk),
    {noreply, State};

handle_info(_Info, State) ->
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
terminate(_Reason, _State = Table) ->
    ets:delete(Table),
    ok.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @end
%%--------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
